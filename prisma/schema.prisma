// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  draft
  published
  archived
  deleted
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  ideas     Idea[]
}

model Post {
  id                 Int        @id @default(autoincrement())
  userId             String     @db.Uuid
  caption            String
  status             PostStatus @default(draft)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  images             Image[]
  memo               Memo?
  metrics            Metrics?
  thumbnailImageKey  String?
  user               User       @relation(fields: [userId], references: [id])
}

model Memo {
  id         Int      @id @default(autoincrement())
  postId     Int      @unique
  answerWhy  String?
  answerWhat String?
  answerNext String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       Post     @relation(fields: [postId], references: [id])
}

model Image {
  id          Int      @id @default(autoincrement())
  postId      Int
  imageKey    String
  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        Post     @relation(fields: [postId], references: [id])
}

// メトリクスモデル（いいね数・コメント数・反応率）
model Metrics {
  id             Int      @id @default(autoincrement())
  postId         Int      @unique
  likesCount     Int      @default(0)
  commentsCount  Int      @default(0)
  savesCount     Int      @default(0)
  sharesCount    Int      @default(0)
  impressions    Int      @default(0)
  reach          Int      @default(0)
  engagementRate Float    @default(0)
  source         String   @default("manual") // manual or api
  fetchedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// AI投稿提案モデル
model Idea {
  id                 Int      @id @default(autoincrement())
  userId             String   @db.Uuid
  relatedPostId      Int?
  title              String
  description        String
  suggestedHashtags  String[] @default([])
  priority           Int      @default(1)
  status             String   @default("pending") // pending, used, dismissed
  suggestedForDate   DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

